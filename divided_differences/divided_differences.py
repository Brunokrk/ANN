#método das diferenças divididas (de Newton)

x = [1.085, 1.301, 1.568, 1.897, 2.305, 2.626, 2.851, 2.95, 3.452, 3.583, 4.019, 4.219, 4.388, 4.819, 5.047, 5.168, 5.513, 5.965, 6.223, 6.424, 6.716, 6.879, 7.222, 7.513, 7.662, 8.028, 8.286, 8.452, 8.946]
y = [1.6333089670679755,1.5207986331001262,1.5353613317591557,1.7757807284832174,2.4065876970492472,3.098134027717733,3.552006950159738,3.703451790039654,3.7151042043952707,3.5410102536036927,2.8956063358744286,2.6910566150981667,2.5858015537365886,2.583953697967796,2.7326721344212785,2.856108348747042,3.3810997947518087,4.250754144932567,4.536717231675665,4.525301836408946,4.18427623942221,3.9123906515193756,3.39475196144384,3.1349594104558056,3.0733502293146286,3.1133672424194776,3.306187102317139,3.507372157383368,4.389673330229931]

def divided_differences(x, y):
    Y = [item for item in y] # vai mudando em cada iteração
    coeffs = [y[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0 ,0 ,0 ,0 ,0 ,0 ,0 ,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    n = len(y)
    for i in range(n - 1):
        for j in range(n -1 -i):
            numer = Y[j+1] - Y[j]     
            denom = x[j+1+i] - x[j] 
            Y[j] = numer / denom
        coeffs[i+1] = Y[0]
    return coeffs


def eq(x, coefss):
    n = len(x)
    equation = f'{coeffs[0]:+}'
    for i in range(n ):
        equation += f'{coeffs[i]:+}' + '*'.join([f'(x{-xj:+})' for j,xj in enumerate(x) if j <i])
    return equation


coeffs = divided_differences(x, y)
print (coeffs)
poly = eq(x, coeffs)
print('p(x) =',poly)