import math
import random
import matplotlib.pyplot as plt
import numpy as np
from typing import List

def modelo(x):
    return 2 * math.exp(0.3*x) + 4 * random.random()


a, b = 0.0, 10
#x = a + (b - a) * np.random.rand(100)
#x.sort()
x = [0.0072, 0.0176, 0.0226, 0.0357, 0.0442, 0.0499, 0.0586, 0.0734, 0.0787, 0.0856, 0.1018, 0.1034, 0.1165, 0.1265, 0.1396, 0.1459, 0.1509, 0.1662, 0.1739, 0.1861, 0.1884, 0.1965, 0.2069, 0.2234, 0.2273, 0.2404, 0.2492, 0.2559, 0.2672, 0.2793, 0.2896, 0.2901, 0.3019, 0.3099, 0.3208, 0.3359, 0.3453, 0.3514, 0.3644, 0.3663, 0.3827, 0.3834, 0.3956, 0.4046, 0.4157, 0.4214, 0.436, 0.4418, 0.4565, 0.4651, 0.4699, 0.4845, 0.494, 0.5027, 0.5128, 0.5173, 0.5259, 0.5351, 0.5461, 0.5535, 0.5657, 0.5758, 0.5812, 0.5927, 0.6018, 0.6126, 0.6221, 0.6297, 0.6361, 0.651, 0.6559, 0.6714, 0.6731, 0.6899, 0.6999, 0.7087, 0.7105, 0.7275, 0.7343, 0.7439, 0.7499, 0.7651, 0.7668, 0.7831, 0.7902, 0.7993, 0.8038, 0.8203, 0.8308, 0.8407, 0.8427, 0.8511, 0.8633, 0.8722, 0.8839, 0.8901, 0.8975, 0.91, 0.9192, 0.9292, 0.9382, 0.9512, 0.9616, 0.9676, 0.9809, 0.9858, 0.9955, 1.0008, 1.0145, 1.025, 1.0328, 1.041, 1.0544, 1.0632, 1.0667, 1.0789, 1.0852, 1.0965, 1.1107, 1.1149, 1.1231, 1.1323, 1.1488, 1.152, 1.16, 1.1761, 1.1837, 1.1888, 1.1963, 1.2065, 1.2184, 1.2324, 1.235, 1.2464, 1.2597, 1.2632, 1.2718, 1.2883, 1.2976, 1.3066, 1.3173, 1.32, 1.3306, 1.3402, 1.3486, 1.3566, 1.3662, 1.3761, 1.3895, 1.3928, 1.4067, 1.4143, 1.4276, 1.4358, 1.4479, 1.4559, 1.4625, 1.47, 1.4776, 1.4877, 1.5031, 1.5128, 1.5203, 1.531, 1.5356, 1.5431, 1.5539, 1.5697, 1.5723, 1.5812, 1.5932, 1.6059, 1.6118, 1.6227, 1.6281, 1.6398, 1.646, 1.6613, 1.6702, 1.6799, 1.6873, 1.6941, 1.7033, 1.7126, 1.7218, 1.7307, 1.7424, 1.7516, 1.7574, 1.768, 1.7805, 1.7905, 1.8032, 1.8063, 1.814, 1.8228, 1.8371, 1.8498, 1.8541, 1.8666, 1.8731, 1.8864, 1.8919, 1.9034, 1.9097, 1.9235, 1.934, 1.9383, 1.9512, 1.9587, 1.963, 1.9751, 1.9892, 1.9991, 2.0021, 2.0117, 2.0242, 2.0353, 2.0375, 2.0469, 2.0569, 2.073, 2.0814, 2.0895, 2.1007, 2.1104, 2.1194, 2.1306, 2.1399, 2.1467, 2.1531, 2.1611, 2.1714, 2.1824, 2.1894, 2.2014, 2.2096, 2.2184, 2.2265, 2.2412, 2.2444, 2.2612, 2.262, 2.2756, 2.2877, 2.298, 2.3014, 2.3161, 2.3249, 2.3345, 2.3433, 2.3501, 2.3602, 2.3681, 2.3826, 2.3893, 2.3928, 2.4025, 2.4153, 2.4259, 2.4314, 2.4484, 2.4523, 2.4659, 2.4758, 2.4843, 2.4905, 2.4974, 2.5129, 2.5158, 2.5251, 2.5416, 2.5462, 2.5582, 2.5667, 2.5713, 2.5835, 2.5915, 2.6038, 2.612, 2.6241, 2.629, 2.6397, 2.6503, 2.6587, 2.6726, 2.6785, 2.6904, 2.6986, 2.7061, 2.7154, 2.7262, 2.735, 2.7475, 2.7495, 2.7615, 2.7704, 2.7835, 2.7857, 2.7961, 2.8074, 2.8185, 2.8313, 2.8326, 2.8477, 2.8552, 2.8671, 2.8737, 2.8835, 2.8936, 2.9033, 2.9067, 2.923, 2.9322, 2.9394, 2.9514, 2.9577, 2.9714, 2.9772, 2.9872, 2.9991]

y = [3.2775, 2.8825, 2.813, 2.6827, 2.7395, 3.1813, 2.743, 2.9289, 2.8321, 2.4135, 3.1805, 3.224, 3.2034, 3.0465, 3.8598, 3.0521, 2.6438, 2.9184, 3.3623, 3.4336, 3.316, 3.2273, 2.1745, 3.5064, 3.1761, 3.1204, 2.9148, 5.069, 3.3039, 3.3756, 3.1865, 3.4406, 3.337, 5.2523, 3.656, 3.3915, 3.7549, 3.7021, 3.4943, 4.3918, 3.6554, 3.4026, 3.7781, 1.8031, 4.7222, 4.2515, 3.7922, 3.5904, 3.5083, 4.6291, 4.4803, 3.6353, 3.8592, 3.9096, 4.8624, 3.6917, 3.9888, 3.897, 3.8884, 3.9012, 4.2136, 4.2519, 4.601, 4.3408, 4.1732, 4.4878, 4.3222, 4.1392, 3.9565, 4.1365, 4.4569, 4.4644, 4.0984, 4.5513, 4.3404, 4.4985, 4.163, 4.3355, 4.197, 4.99, 4.38, 4.6711, 4.6178, 4.5806, 4.8214, 4.6252, 4.9709, 5.3741, 4.5814, 4.9587, 4.9426, 4.5187, 4.9198, 4.556, 4.7113, 4.8034, 4.546, 6.2752, 5.0784, 4.9913, 3.0589, 4.3417, 5.8065, 4.8, 6.8052, 4.8922, 5.1284, 5.3389, 5.2095, 5.2961, 5.267, 6.2337, 5.1025, 4.44, 4.1876, 5.4319, 5.5189, 5.5536, 5.701, 5.3856, 5.3487, 6.3105, 5.5013, 5.34, 5.6239, 5.225, 5.679, 6.5865, 5.5885, 5.897, 5.845, 6.1529, 5.9444, 6.1229, 5.8108, 6.0074, 6.2436, 6.4892, 5.3844, 6.8685, 6.1376, 6.2135, 6.3266, 6.4035, 6.3673, 6.1864, 6.4389, 6.3044, 5.7212, 6.5161, 6.4909, 6.233, 6.4322, 6.2514, 6.707, 6.9223, 6.7945, 6.7025, 6.9129, 6.7778, 6.7897, 6.9267, 7.2207, 7.2391, 7.3597, 6.8948, 7.1116, 7.3585, 7.5613, 7.1597, 7.3816, 7.1647, 7.6844, 7.6204, 9.4589, 7.6785, 7.4384, 7.7644, 7.7101, 7.583, 7.5467, 7.6506, 7.6289, 7.6727, 7.884, 7.9119, 7.9847, 8.1335, 8.3026, 8.196, 8.009, 8.2527, 8.3997, 8.4806, 8.2626, 8.3956, 8.4778, 8.0753, 9.5653, 8.7941, 8.8601, 8.9727, 8.5487, 10.0473, 7.2735, 8.8952, 9.1127, 8.8056, 8.8517, 9.378, 9.144, 9.0495, 8.9269, 9.1933, 9.5457, 9.5174, 9.3316, 8.3751, 10.38, 9.6662, 9.157, 9.9669, 10.0523, 10.0855, 9.792, 10.1171, 10.2756, 10.9964, 10.1168, 10.695, 11.5103, 10.4485, 10.4789, 10.6308, 10.407, 10.677, 10.367, 10.461, 10.7738, 11.2818, 10.934, 10.519, 9.1649, 10.8318, 11.2031, 11.3392, 11.6184, 11.4787, 11.3771, 12.2801, 11.3536, 12.2823, 11.563, 12.3301, 13.4715, 11.7612, 11.9113, 12.0352, 11.4661, 12.2215, 11.6887, 10.2417, 12.2157, 12.5417, 12.4608, 12.3494, 12.5016, 12.9331, 12.7258, 12.4678, 12.7721, 12.7049, 13.0348, 12.8494, 13.0285, 12.8815, 13.2332, 15.1928, 13.1725, 13.3827, 13.4179, 13.6296, 13.9909, 15.215, 13.9895, 13.8891, 14.262, 14.0427, 14.3946, 14.1768, 14.1806, 16.0216, 15.0412, 14.7473, 14.356, 15.2032, 14.9436, 14.8694, 14.7401, 15.0043, 14.8776, 15.2711, 15.3181, 15.3153, 14.8527, 14.9497, 15.7214, 15.773, 15.9021, 16.1154, 16.1559, 16.1978, 15.926, 16.466, 16.3526, 16.63, 16.8819, 16.4322, 16.8523, 16.6926, 16.9129]

#y = [modelo(xi) for xi in x]

def best_exp(x: List[float], y: List[float]):
    #y = a * exp(b*x)
    #a = exp (a0) e b = a1
    #y_ = a0 + a1x, onde y_ é a reta que melhor se ajusta à lista de pontos x, ln(y)

    sum_x = sum(x)
    sum_x2 = sum(xi**2 for xi in x)
    A = [[len(x), sum_x],[sum_x, sum_x2 ]]
    y_ = [math.log(yi) for yi in y]
    sum_xy = sum(xi * yi for xi, yi in zip(x, y_))
    B = [sum(y_), sum_xy]
    a0, a1 = np.linalg.solve(A, B)
    a, b = math.exp(a0), a1
    return a, b

a, b =best_exp(x, y)

def bexp(x):
    return a * math.exp(b*x)

t=np.linspace(min(x), max(x), 100)
bexpt = [bexp(i) for i in t]
plt.plot(t, bexpt)
plt.scatter(x, y)
plt.savefig('pontos_exp.png')
print(a)
print(b)



#t = np.linspace(0, 5, 100)
